1)
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier

# Load the dataset
data = pd.read_csv('Data.csv')

# Convert 'Income' to numeric format
data['Income'] = data['Income'].replace('[\$,]', '', regex=True).astype(float)

# Extract features and target variable
X = data[['Age', 'Income']]
y = data['Risk']

# Standardize the features using Min-Max scaling
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# New record (#10) to classify
new_record = pd.DataFrame({'Age': [30], 'Income': [30000]})
new_record_scaled = scaler.transform(new_record)

# Calculate distances using Euclidean distance
distances = ((X_scaled - new_record_scaled) ** 2).sum(axis=1) ** 0.5
print(distances)
# Sort distances and get the indices of the k-nearest neighbors
k = 9
nearest_neighbors_indices = distances.argsort()[:k]

# Use unweighted voting to classify the new record
predicted_class = y.iloc[nearest_neighbors_indices].mode().values[0]

print("Predicted Risk for the new record (#10):", predicted_class)

2)
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load the dataset
data = pd.read_csv('data4_19.csv')

# Extract features and target variable
X = data.iloc[:, :4]
y = data.iloc[:, 4]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a KNN classifier
k_values = [1, 3, 5, 7]  # You can try different values of k
best_k = None
best_accuracy = 0

for k in k_values:
    model = KNeighborsClassifier(n_neighbors=k)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)

    print(f"Accuracy for k={k}: {accuracy}")

    # Update the best k if needed
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_k = k

# Use the best k to predict the species of the new flower
new_flower = [[5.2, 3.1, 1.4, 0.2]]
model = KNeighborsClassifier(n_neighbors=best_k)
model.fit(X, y)
predicted_species = model.predict(new_flower)

print(f"The predicted species for the new flower is: {predicted_species[0]} (with k={best_k})")